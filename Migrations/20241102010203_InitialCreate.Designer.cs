// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SweNamelessBE_RepositoryPattern.Data;

#nullable disable

namespace SweNamelessBE_RepositoryPattern.API.Migrations
{
    [DbContext(typeof(TicketRepublicDbContext))]
    [Migration("20241102010203_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("SweNamelessBE_RepositoryPattern.Models.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Artist")
                        .HasColumnType("text");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<decimal>("TicketPrice")
                        .HasColumnType("numeric");

                    b.Property<string>("TicketUrl")
                        .HasColumnType("text");

                    b.Property<string>("Uid")
                        .HasColumnType("text");

                    b.Property<int>("VenueId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("VenueId");

                    b.ToTable("Events");

                    b.HasData(
                        new
                        {
                            Id = 101,
                            Artist = "The Rolling Waves",
                            Date = new DateTime(2024, 11, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TicketPrice = 65.50m,
                            TicketUrl = "https://example.com/tickets/rolling-waves",
                            Uid = "V4ZZtExf09dyP1GLH7Yhz7QqiOq2",
                            VenueId = 301
                        },
                        new
                        {
                            Id = 102,
                            Artist = "Electric Dreams",
                            Date = new DateTime(2024, 12, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TicketPrice = 80.00m,
                            TicketUrl = "https://example.com/tickets/electric-dreams",
                            Uid = "ZpQoucFlCVNP5c0WunWKIi0mVKE3",
                            VenueId = 302
                        },
                        new
                        {
                            Id = 103,
                            Artist = "The Jazz Collective",
                            Date = new DateTime(2024, 12, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TicketPrice = 50.00m,
                            TicketUrl = "https://example.com/tickets/jazz-collective",
                            Uid = "Yy2T2FeWvZdd4W8epNHt37AId6J2",
                            VenueId = 303
                        },
                        new
                        {
                            Id = 104,
                            Artist = "Symphony of Stars",
                            Date = new DateTime(2024, 11, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TicketPrice = 95.75m,
                            TicketUrl = "https://example.com/tickets/symphony-stars",
                            Uid = "Yy2T2FeWvZdd4W8epNHt37AId6J2",
                            VenueId = 301
                        },
                        new
                        {
                            Id = 105,
                            Artist = "Rock Legends",
                            Date = new DateTime(2024, 10, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TicketPrice = 120.00m,
                            TicketUrl = "https://example.com/tickets/rock-legends",
                            Uid = "ZpQoucFlCVNP5c0WunWKIi0mVKE3",
                            VenueId = 302
                        },
                        new
                        {
                            Id = 106,
                            Artist = "Future Sounds",
                            Date = new DateTime(2024, 10, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TicketPrice = 75.99m,
                            TicketUrl = "https://example.com/tickets/future-sounds",
                            Uid = "V4ZZtExf09dyP1GLH7Yhz7QqiOq2",
                            VenueId = 304
                        });
                });

            modelBuilder.Entity("SweNamelessBE_RepositoryPattern.Models.RSVP", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("EventId")
                        .HasColumnType("integer");

                    b.Property<string>("Uid")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("RSVPs");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            EventId = 101,
                            Uid = "V4ZZtExf09dyP1GLH7Yhz7QqiOq2"
                        },
                        new
                        {
                            Id = 2,
                            EventId = 102,
                            Uid = "ZpQoucFlCVNP5c0WunWKIi0mVKE3"
                        },
                        new
                        {
                            Id = 3,
                            EventId = 103,
                            Uid = "Yy2T2FeWvZdd4W8epNHt37AId6J2"
                        });
                });

            modelBuilder.Entity("SweNamelessBE_RepositoryPattern.Models.Venue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<string>("City")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("State")
                        .HasColumnType("text");

                    b.Property<string>("Uid")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Venues");

                    b.HasData(
                        new
                        {
                            Id = 301,
                            Address = "123 Main St",
                            City = "New York City",
                            Name = "The Grand Arena",
                            State = "New York",
                            Uid = "V4ZZtExf09dyP1GLH7Yhz7QqiOq2"
                        },
                        new
                        {
                            Id = 302,
                            Address = "456 Sunset Blvd",
                            City = "Los Angeles",
                            Name = "Sunset Pavilion",
                            State = "California",
                            Uid = "ZpQoucFlCVNP5c0WunWKIi0mVKE3"
                        },
                        new
                        {
                            Id = 303,
                            Address = "789 River Rd",
                            City = "Chicago",
                            Name = "The Riverfront Stage",
                            State = "Illinois",
                            Uid = "Yy2T2FeWvZdd4W8epNHt37AId6J2"
                        },
                        new
                        {
                            Id = 304,
                            Address = "321 Mountain Ave",
                            City = "Denver",
                            Name = "Mountain View Amphitheater",
                            State = "Colorado",
                            Uid = "Yy2T2FeWvZdd4W8epNHt37AId6J2"
                        });
                });

            modelBuilder.Entity("SweNamelessBE_RepositoryPattern.Models.Event", b =>
                {
                    b.HasOne("SweNamelessBE_RepositoryPattern.Models.Venue", "Venue")
                        .WithMany("Events")
                        .HasForeignKey("VenueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Venue");
                });

            modelBuilder.Entity("SweNamelessBE_RepositoryPattern.Models.RSVP", b =>
                {
                    b.HasOne("SweNamelessBE_RepositoryPattern.Models.Event", "Event")
                        .WithMany("RSVP")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("SweNamelessBE_RepositoryPattern.Models.Event", b =>
                {
                    b.Navigation("RSVP");
                });

            modelBuilder.Entity("SweNamelessBE_RepositoryPattern.Models.Venue", b =>
                {
                    b.Navigation("Events");
                });
#pragma warning restore 612, 618
        }
    }
}
